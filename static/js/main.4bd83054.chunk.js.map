{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableStan.tsx","Task.tsx","Todolist.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","state/store.ts","AppWithRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriotities","AddItemForm","React","memo","props","_useState","useState","_useState2","_slicedToArray","newTaskTitle","setNewTaskTitle","_useState3","_useState4","error","setError","createElement","TextField","variant","label","value","onChange","event","currentTarget","onKeyPress","charCode","addItem","helperText","IconButton","onClick","trim","color","ControlPoint","EditableStan","editMode","setEditMode","title","setTitle","e","onBlur","autoFocus","onDoubleClick","instance","axios","create","_objectSpread","baseURL","withCredentials","headers","API-KEY","todolistsApi","get","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","key","className","status","Completed","Checkbox","checked","changeTaskStatus","New","removeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onComplitedClickHandler","addTask","changeTodolistTitle","newTitle","tasks","filter","t","removeTodoList","map","Button","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","initialState","removeTodolistAC","todolistID","addTodolistAC","newTodolistTitle","v1","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","fetchTodolistsTC","_ref","_asyncToGenerator","_callee","dispatch","_context","res","data","console","log","_x","apply","arguments","removeTaskAC","taskId","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","rootReducer","combineReducers","todolist","action","tl","addedDate","order","concat","_toConsumableArray","cnageTodoList","find","stateCopy","filteredTasks","newTasks","todoListId","description","startDate","deadline","priority","Low","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","window","AppWithRedux","todoList","useSelector","useEffect","changeStatus","taskID","todoListID","addTodolists","AppBar","position","Toolbar","size","edge","aria-label","sx","mr","Menu","Typography","component","flexGrow","Container","fixed","Grid","container","style","padding","spacing","tasksForTodolist","item","Paper","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"2HAsCYA,EAMAC,qFCpCCC,EAAcC,IAAMC,KAAK,SAACC,GAAgC,IAAAC,EAC3BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAAAI,EACVL,mBAAwB,MAAKM,EAAAJ,YAAAG,EAAA,GAAhDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAsBtB,OAAOV,IAAAa,cAAA,WAEHb,IAAAa,cAACC,IAAS,CACNC,QAAS,WACTC,MAAO,aACPC,MAAOV,EACPW,SA3BgB,SAACC,GACrBX,EAAgBW,EAAMC,cAAcH,QA2BhCI,WAjBkB,SAACF,GACT,OAAVR,GACAC,EAAS,MAEU,KAAnBO,EAAMG,WACNpB,EAAMqB,QAAQhB,GACdC,EAAgB,MAYhBG,QAASA,EACTa,WAAYb,IAEhBX,IAAAa,cAACY,IAAU,CAACC,QA7BA,WACgB,KAAxBnB,EAAaoB,QACbzB,EAAMqB,QAAQhB,EAAaoB,QAC3BnB,EAAgB,KAEhBI,EAAS,sBAwBiBgB,MAAO,WACjC5B,IAAAa,cAACgB,IAAY,UCpCZC,EAAe9B,IAAMC,KAAK,SAAUC,GAA8B,IAAAC,EAC7CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAxC4B,EAAQ1B,EAAA,GAAE2B,EAAW3B,EAAA,GAAAI,EACFL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA/BwB,EAAKvB,EAAA,GAAEwB,EAAQxB,EAAA,GAYpB,OAAOqB,EACD/B,IAAAa,cAACC,IAAS,CAACG,MAAOgB,EAAOf,SAHF,SAACiB,GAAgC,OAAKD,EAASC,EAAEf,cAAcH,QAG7BmB,OAPtC,WACrBJ,GAAY,GACZ9B,EAAMgB,SAASe,IAKsEI,WAAS,IAC5FrC,IAAAa,cAAA,QAAMyB,cAZa,WACrBN,GAAY,GACZE,EAAShC,EAAM+B,SAU2B/B,EAAM+B,4CFflDM,SAAWC,EAAMC,OAAMC,YAAA,CACzBC,QAAS,iDAPwB,CACjCC,iBAAiB,EACjBC,QAAS,CACLC,UAAW,4CAqClB,SALWjD,OAAY,aAAZA,IAAY,2BAAZA,IAAY,yBAAZA,IAAY,iBAKvB,CALWA,MAAY,KAYvB,SANWC,OAAc,aAAdA,IAAc,mBAAdA,IAAc,WAAdA,IAAc,uBAAdA,IAAc,iBAMzB,CANWA,MAAc,KAmCnB,IAAMiD,EACG,WACR,OAAOR,EAASS,IAAoB,eGpE/BC,EAAOjD,IAAMC,KAAK,SAACC,GAC5B,IAOMgD,EAAuBC,sBAAY,SAACC,GACtClD,EAAMmD,gBAAgBnD,EAAMoD,KAAKC,GAAIH,EAAUlD,EAAMsD,aACvD,CAACtD,EAAMoD,KAAKC,GAAIrD,EAAMmD,gBAAiBnD,EAAMsD,aAE/C,OACIxD,IAAAa,cAAA,OAAK4C,IAAKvD,EAAMoD,KAAKC,GAAIG,UAAWxD,EAAMoD,KAAKK,SAAW9D,EAAa+D,UAAW,UAAY,IAC1F5D,IAAAa,cAACgD,IAAQ,CACLC,QAAS5D,EAAMoD,KAAKK,SAAW9D,EAAa+D,UAC5C1C,SAZkB,SAACiB,GAC3BjC,EAAM6D,iBAAiB7D,EAAMoD,KAAKC,GAAIpB,EAAEf,cAAc0C,QAAUjE,EAAa+D,UAAY/D,EAAamE,IAAK9D,EAAMsD,eAa7GxD,IAAAa,cAACiB,EAAY,CAACG,MAAO/B,EAAMoD,KAAKrB,MAClBf,SAAUgC,IACxBlD,IAAAa,cAACY,IAAU,CAACC,QAnBI,WACpBxB,EAAM+D,WAAW/D,EAAMoD,KAAKC,GAAIrD,EAAMsD,cAmB9BxD,IAAAa,cAACqD,IAAM,UCLVC,EAAWnE,IAAMC,KAAK,SAAUC,GAEzC,IAAMkE,EAAoBjB,sBAAY,kBAAMjD,EAAMmE,aAAa,MAAOnE,EAAMqD,KAAK,CAACrD,EAAMmE,aAAcnE,EAAMqD,KACtGe,EAAuBnB,sBAAY,kBAAMjD,EAAMmE,aAAa,SAAUnE,EAAMqD,KAAK,CAACrD,EAAMmE,aAAcnE,EAAMqD,KAC5GgB,EAA0BpB,sBAAY,kBAAMjD,EAAMmE,aAAa,YAAanE,EAAMqD,KAAK,CAACrD,EAAMmE,aAAcnE,EAAMqD,KAElHiB,EAAUrB,sBAAY,SAAClB,GACzB/B,EAAMsE,QAAQvC,EAAO/B,EAAMqD,KAC5B,CAACrD,EAAMsE,QAAStE,EAAMqD,KAInBkB,EAAsBtB,sBAAY,SAACuB,GACrCxE,EAAMuE,oBAAoBvE,EAAMqD,GAAImB,IACrC,CAACxE,EAAMqD,GAAIrD,EAAMuE,sBAGGvE,EAAMyE,MAU7B,MARqB,WAAjBzE,EAAM0E,QACa1E,EAAMyE,MAAMC,OAAO,SAAAC,GAAC,OAAIA,EAAElB,SAAW9D,EAAamE,MAEpD,cAAjB9D,EAAM0E,QACa1E,EAAMyE,MAAMC,OAAO,SAAAC,GAAC,OAAIA,EAAElB,SAAW9D,EAAa+D,YAKrE5D,IAAAa,cAAA,WACIb,IAAAa,cAAA,UAAIb,IAAAa,cAACiB,EAAY,CAACG,MAAO/B,EAAM+B,MAAOf,SAAUuD,IAC5CzE,IAAAa,cAACY,IAAU,CAACC,QArBD,WACnBxB,EAAM4E,eAAe5E,EAAMqD,MAqBfvD,IAAAa,cAACqD,IAAM,QAKflE,IAAAa,cAACd,EAAW,CAACwB,QAASiD,IACtBxE,IAAAa,cAAA,WAEQX,EAAMyE,MAAMI,IAAI,SAAAF,GAAC,OAAI7E,IAAAa,cAACoC,EAAI,CACtBK,KAAMuB,EACNd,iBAAkB7D,EAAM6D,iBACxBV,gBAAiBnD,EAAMmD,gBACvBY,WAAY/D,EAAM+D,WAClBT,WAAYtD,EAAMqD,GAClBE,IAAKvD,EAAMqD,QAavBvD,IAAAa,cAAA,WACIb,IAAAa,cAACmE,IAAM,CAACjE,QAA0B,QAAjBb,EAAM0E,OAAmB,YAAc,OAAQlD,QAAS0C,GAAmB,OAE5FpE,IAAAa,cAACmE,IAAM,CAACpD,MAAO,UAAWb,QAA0B,WAAjBb,EAAM0E,OAAsB,YAAc,OACrElD,QAAS4C,GAAsB,UAEvCtE,IAAAa,cAACmE,IAAM,CAACpD,MAAO,YAAab,QAA0B,cAAjBb,EAAM0E,OAAyB,YAAc,OAC1ElD,QAAS6C,GAAyB,sHC7F1DU,EAAA,kBAAAC,GAAA,IAAAA,EAAA,GAAAC,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAAhC,EAAAiC,GAAAD,EAAAhC,GAAAiC,EAAAzE,OAAA0E,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAAhC,EAAAxC,GAAA,OAAAmE,OAAAI,eAAAC,EAAAhC,EAAA,CAAAxC,QAAAmF,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAb,EAAAhC,GAAA,IAAA0C,EAAA,aAAAI,GAAAJ,EAAA,SAAAV,EAAAhC,EAAAxC,GAAA,OAAAwE,EAAAhC,GAAAxC,GAAA,SAAAuF,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAArB,qBAAAyB,EAAAJ,EAAAI,EAAAC,EAAA3B,OAAA3C,OAAAoE,EAAAxB,WAAA2B,EAAA,IAAAC,EAAAL,GAAA,WAAApB,EAAAuB,EAAA,WAAA9F,MAAAiG,EAAAT,EAAAE,EAAAK,KAAAD,EAAA,SAAAI,EAAAC,EAAA3B,EAAA4B,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAAG,KAAA9B,EAAA4B,IAAA,MAAAd,GAAA,OAAAe,KAAA,QAAAD,IAAAd,IAAArB,EAAAsB,OAAA,IAAAgB,EAAA,YAAAV,KAAA,SAAAW,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAxB,EAAAwB,EAAA9B,EAAA,kBAAA+B,OAAA,IAAAC,EAAAzC,OAAA0C,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA5C,GAAAG,EAAAiC,KAAAQ,EAAAlC,KAAA8B,EAAAI,GAAA,IAAAE,EAAAP,EAAArC,UAAAyB,EAAAzB,UAAAD,OAAA3C,OAAAkF,GAAA,SAAAO,EAAA7C,GAAA,0BAAA8C,QAAA,SAAAC,GAAAjC,EAAAd,EAAA+C,EAAA,SAAAf,GAAA,OAAAO,KAAAS,QAAAD,EAAAf,OAAA,SAAAiB,EAAAvB,EAAAwB,GAAA,IAAAC,EAAAhD,EAAAoC,KAAA,WAAA3G,MAAA,SAAAmH,EAAAf,GAAA,SAAAoB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAf,EAAAqB,EAAAC,GAAA,IAAAE,EAAA1B,EAAAJ,EAAAqB,GAAArB,EAAAM,GAAA,aAAAwB,EAAAvB,KAAA,KAAAwB,EAAAD,EAAAxB,IAAApG,EAAA6H,EAAA7H,MAAA,OAAAA,GAAA,iBAAAA,GAAAqE,EAAAiC,KAAAtG,EAAA,WAAAsH,EAAAG,QAAAzH,EAAA8H,SAAAC,KAAA,SAAA/H,GAAA2H,EAAA,OAAA3H,EAAAyH,EAAAC,IAAA,SAAApC,GAAAqC,EAAA,QAAArC,EAAAmC,EAAAC,KAAAJ,EAAAG,QAAAzH,GAAA+H,KAAA,SAAAC,GAAAH,EAAA7H,MAAAgI,EAAAP,EAAAI,IAAA,SAAAnI,GAAA,OAAAiI,EAAA,QAAAjI,EAAA+H,EAAAC,OAAAE,EAAAxB,KAAAuB,CAAAR,EAAAf,EAAAqB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAAvB,EAAAT,EAAAE,EAAAK,GAAA,IAAAkC,EAAA,iCAAAd,EAAAf,GAAA,iBAAA6B,EAAA,UAAAC,MAAA,iDAAAD,EAAA,cAAAd,EAAA,MAAAf,EAAA,OAAA+B,IAAA,IAAApC,EAAAoB,SAAApB,EAAAK,QAAA,KAAAgC,EAAArC,EAAAqC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAArC,GAAA,GAAAsC,EAAA,IAAAA,IAAA9B,EAAA,gBAAA8B,GAAA,YAAAtC,EAAAoB,OAAApB,EAAAwC,KAAAxC,EAAAyC,MAAAzC,EAAAK,SAAA,aAAAL,EAAAoB,OAAA,uBAAAc,EAAA,MAAAA,EAAA,YAAAlC,EAAAK,IAAAL,EAAA0C,kBAAA1C,EAAAK,SAAA,WAAAL,EAAAoB,QAAApB,EAAA2C,OAAA,SAAA3C,EAAAK,KAAA6B,EAAA,gBAAAL,EAAA1B,EAAAV,EAAAE,EAAAK,GAAA,cAAA6B,EAAAvB,KAAA,IAAA4B,EAAAlC,EAAA4C,KAAA,6BAAAf,EAAAxB,MAAAG,EAAA,gBAAAvG,MAAA4H,EAAAxB,IAAAuC,KAAA5C,EAAA4C,MAAA,UAAAf,EAAAvB,OAAA4B,EAAA,YAAAlC,EAAAoB,OAAA,QAAApB,EAAAK,IAAAwB,EAAAxB,OAAA,SAAAkC,EAAAF,EAAArC,GAAA,IAAA6C,EAAA7C,EAAAoB,SAAAiB,EAAAvD,SAAA+D,GAAA,QAAAC,IAAA1B,EAAA,OAAApB,EAAAqC,SAAA,eAAAQ,GAAAR,EAAAvD,SAAAiE,SAAA/C,EAAAoB,OAAA,SAAApB,EAAAK,SAAAyC,EAAAP,EAAAF,EAAArC,GAAA,UAAAA,EAAAoB,SAAA,WAAAyB,IAAA7C,EAAAoB,OAAA,QAAApB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAH,EAAA,aAAArC,EAAA,IAAAqB,EAAA1B,EAAAiB,EAAAiB,EAAAvD,SAAAkB,EAAAK,KAAA,aAAAwB,EAAAvB,KAAA,OAAAN,EAAAoB,OAAA,QAAApB,EAAAK,IAAAwB,EAAAxB,IAAAL,EAAAqC,SAAA,KAAA7B,EAAA,IAAAyC,EAAApB,EAAAxB,IAAA,OAAA4C,IAAAL,MAAA5C,EAAAqC,EAAAa,YAAAD,EAAAhJ,MAAA+F,EAAAmD,KAAAd,EAAAe,QAAA,WAAApD,EAAAoB,SAAApB,EAAAoB,OAAA,OAAApB,EAAAK,SAAAyC,GAAA9C,EAAAqC,SAAA,KAAA7B,GAAAyC,GAAAjD,EAAAoB,OAAA,QAAApB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAhD,EAAAqC,SAAA,KAAA7B,GAAA,SAAA6C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAA1C,KAAAgD,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA1B,EAAA0B,EAAAQ,YAAA,GAAAlC,EAAAvB,KAAA,gBAAAuB,EAAAxB,IAAAkD,EAAAQ,WAAAlC,EAAA,SAAA5B,EAAAL,GAAAgB,KAAAgD,WAAA,EAAAJ,OAAA,SAAA5D,EAAAuB,QAAAkC,EAAAzC,WAAAoD,OAAA,YAAAhD,EAAAiD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAApF,GAAA,GAAAqF,EAAA,OAAAA,EAAA3D,KAAA0D,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAA9F,EAAAiC,KAAA0D,EAAAI,GAAA,OAAAlB,EAAAlJ,MAAAgK,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAlJ,WAAA6I,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAAnI,WAAA6I,EAAAF,MAAA,UAAAnC,EAAApC,UAAAqC,EAAAlC,EAAAyC,EAAA,eAAAhH,MAAAyG,EAAArB,cAAA,IAAAb,EAAAkC,EAAA,eAAAzG,MAAAwG,EAAApB,cAAA,IAAAoB,EAAA6D,YAAAnF,EAAAuB,EAAAzB,EAAA,qBAAAf,EAAAqG,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAAhE,GAAA,uBAAAgE,EAAAH,aAAAG,EAAAE,QAAAzG,EAAA0G,KAAA,SAAAJ,GAAA,OAAApG,OAAAyG,eAAAzG,OAAAyG,eAAAL,EAAA9D,IAAA8D,EAAAM,UAAApE,EAAAvB,EAAAqF,EAAAvF,EAAA,sBAAAuF,EAAAnG,UAAAD,OAAA3C,OAAAwF,GAAAuD,GAAAtG,EAAA6G,MAAA,SAAA1E,GAAA,OAAA0B,QAAA1B,IAAAa,EAAAI,EAAAjD,WAAAc,EAAAmC,EAAAjD,UAAAU,EAAA,kBAAA6B,OAAA1C,EAAAoD,gBAAApD,EAAA8G,MAAA,SAAAvF,EAAAC,EAAAC,EAAAC,EAAA2B,QAAA,IAAAA,MAAA0D,SAAA,IAAAC,EAAA,IAAA5D,EAAA9B,EAAAC,EAAAC,EAAAC,EAAAC,GAAA2B,GAAA,OAAArD,EAAAqG,oBAAA7E,GAAAwF,IAAA/B,OAAAnB,KAAA,SAAAF,GAAA,OAAAA,EAAAc,KAAAd,EAAA7H,MAAAiL,EAAA/B,UAAAjC,EAAAD,GAAA9B,EAAA8B,EAAAhC,EAAA,aAAAE,EAAA8B,EAAApC,EAAA,kBAAA+B,OAAAzB,EAAA8B,EAAA,mDAAA/C,EAAAiH,KAAA,SAAAC,GAAA,IAAAC,EAAAjH,OAAAgH,GAAAD,EAAA,WAAA1I,KAAA4I,EAAAF,EAAAtB,KAAApH,GAAA,OAAA0I,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAA3H,EAAA0I,EAAAI,MAAA,GAAA9I,KAAA4I,EAAA,OAAAlC,EAAAlJ,MAAAwC,EAAA0G,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAAjF,EAAA8C,SAAAf,EAAA5B,UAAA,CAAAqG,YAAAzE,EAAA+D,MAAA,SAAAwB,GAAA,GAAA5E,KAAA6E,KAAA,EAAA7E,KAAAuC,KAAA,EAAAvC,KAAA4B,KAAA5B,KAAA6B,WAAAK,EAAAlC,KAAAgC,MAAA,EAAAhC,KAAAyB,SAAA,KAAAzB,KAAAQ,OAAA,OAAAR,KAAAP,SAAAyC,EAAAlC,KAAAgD,WAAAzC,QAAA2C,IAAA0B,EAAA,QAAAb,KAAA/D,KAAA,MAAA+D,EAAAe,OAAA,IAAApH,EAAAiC,KAAAK,KAAA+D,KAAAR,OAAAQ,EAAAgB,MAAA,MAAA/E,KAAA+D,QAAA7B,IAAA8C,KAAA,WAAAhF,KAAAgC,MAAA,MAAAiD,EAAAjF,KAAAgD,WAAA,GAAAG,WAAA,aAAA8B,EAAAvF,KAAA,MAAAuF,EAAAxF,IAAA,OAAAO,KAAAkF,MAAApD,kBAAA,SAAAqD,GAAA,GAAAnF,KAAAgC,KAAA,MAAAmD,EAAA,IAAA/F,EAAAY,KAAA,SAAAoF,EAAAC,EAAAC,GAAA,OAAArE,EAAAvB,KAAA,QAAAuB,EAAAxB,IAAA0F,EAAA/F,EAAAmD,KAAA8C,EAAAC,IAAAlG,EAAAoB,OAAA,OAAApB,EAAAK,SAAAyC,KAAAoD,EAAA,QAAA7B,EAAAzD,KAAAgD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA3C,KAAAgD,WAAAS,GAAAxC,EAAA0B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAwC,EAAA,UAAAzC,EAAAC,QAAA5C,KAAA6E,KAAA,KAAAU,EAAA7H,EAAAiC,KAAAgD,EAAA,YAAA6C,EAAA9H,EAAAiC,KAAAgD,EAAA,iBAAA4C,GAAAC,EAAA,IAAAxF,KAAA6E,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,MAAA7C,KAAA6E,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,iBAAA,GAAAyC,GAAA,GAAAvF,KAAA6E,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,YAAA2C,EAAA,UAAAjE,MAAA,6CAAAvB,KAAA6E,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,gBAAAf,OAAA,SAAArC,EAAAD,GAAA,QAAAgE,EAAAzD,KAAAgD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA3C,KAAAgD,WAAAS,GAAA,GAAAd,EAAAC,QAAA5C,KAAA6E,MAAAnH,EAAAiC,KAAAgD,EAAA,eAAA3C,KAAA6E,KAAAlC,EAAAG,WAAA,KAAA2C,EAAA9C,EAAA,OAAA8C,IAAA,UAAA/F,GAAA,aAAAA,IAAA+F,EAAA7C,QAAAnD,MAAAgG,EAAA3C,aAAA2C,EAAA,UAAAxE,EAAAwE,IAAAtC,WAAA,UAAAlC,EAAAvB,OAAAuB,EAAAxB,MAAAgG,GAAAzF,KAAAQ,OAAA,OAAAR,KAAAuC,KAAAkD,EAAA3C,WAAAlD,GAAAI,KAAA0F,SAAAzE,IAAAyE,SAAA,SAAAzE,EAAA8B,GAAA,aAAA9B,EAAAvB,KAAA,MAAAuB,EAAAxB,IAAA,gBAAAwB,EAAAvB,MAAA,aAAAuB,EAAAvB,KAAAM,KAAAuC,KAAAtB,EAAAxB,IAAA,WAAAwB,EAAAvB,MAAAM,KAAAkF,KAAAlF,KAAAP,IAAAwB,EAAAxB,IAAAO,KAAAQ,OAAA,SAAAR,KAAAuC,KAAA,kBAAAtB,EAAAvB,MAAAqD,IAAA/C,KAAAuC,KAAAQ,GAAAnD,GAAA+F,OAAA,SAAA7C,GAAA,QAAAW,EAAAzD,KAAAgD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA3C,KAAAgD,WAAAS,GAAA,GAAAd,EAAAG,eAAA,OAAA9C,KAAA0F,SAAA/C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA/C,IAAAgG,MAAA,SAAAhD,GAAA,QAAAa,EAAAzD,KAAAgD,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA3C,KAAAgD,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA3B,EAAA0B,EAAAQ,WAAA,aAAAlC,EAAAvB,KAAA,KAAAmG,EAAA5E,EAAAxB,IAAAyD,EAAAP,GAAA,OAAAkD,GAAA,UAAAtE,MAAA,0BAAAuE,cAAA,SAAAzC,EAAAf,EAAAE,GAAA,OAAAxC,KAAAyB,SAAA,CAAAvD,SAAAkC,EAAAiD,GAAAf,aAAAE,WAAA,SAAAxC,KAAAQ,SAAAR,KAAAP,SAAAyC,GAAAtC,IAAAtC,EA8BA,IAAMyI,EAA0C,GAoDnCC,EAAmB,SAACC,GAC7B,MAAO,CAACvG,KAAM,kBAAmB/D,GAAIsK,IAE5BC,EAAgB,SAACC,GAC1B,MAAO,CAACzG,KAAM,eAAgBrF,MAAO8L,EAAkBvK,WAAYwK,gBAE1DC,EAAwB,SAAC1K,EAAYtB,GAC9C,MAAO,CAACqF,KAAM,wBAAyB/D,GAAIA,EAAItB,MAAOA,IAE7CiM,EAAyB,SAAC3K,EAAYqB,GAC/C,MAAO,CAAC0C,KAAM,yBAA0B/D,GAAIA,EAAIqB,OAAQA,IAE/CuJ,EAAiB,SAACC,GAC3B,MAAO,CAAC9G,KAAM,gBAAiB8G,UAAWA,IAKjCC,EAAmB,WAC5B,sBAAAC,EAAAC,YAAAtJ,IAAA2G,KAAO,SAAA4C,EAAOC,GAAkB,OAAAxJ,IAAAuB,KAAA,SAAAkI,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAvE,MAAA,OAC5BpH,IACKiG,KAAK,SAAC2F,GACHF,EAASN,EAAeQ,EAAIC,SAE/BpB,MAAM,SAACjH,GACJsI,QAAQC,IAAIvI,KACd,wBAAAmI,EAAA9B,SAAA4B,MACT,gBAAAO,GAAA,OAAAT,EAAAU,MAAApH,KAAAqH,YARD,ICtDEtB,EAA+B,GA+ExBuB,EAAe,SAACC,EAAgBtB,GACzC,MAAO,CAACvG,KAAM,cAAeuG,aAAYsB,WAEhCC,EAAY,SAACnN,EAAe4L,GACrC,MAAO,CAACvG,KAAM,WAAYrF,QAAO4L,eAExBwB,EAAqB,SAACF,EACAxL,EACAkK,GAC/B,MAAO,CAACvG,KAAM,qBAAsB3D,SAAQkK,aAAYsB,WAE/CG,EAAoB,SAACH,EACAlN,EACA4L,GAC9B,MAAO,CAACvG,KAAM,oBAAqBrF,QAAO4L,aAAYsB,mCCvIpDI,EAAcC,YAAgB,CAChCC,SFmC2B,WAAsG,IAArGvG,EAAgC+F,UAAA7D,OAAA,QAAAtB,IAAAmF,UAAA,GAAAA,UAAA,GAAGtB,EAAc+B,EAAoBT,UAAA7D,OAAA,EAAA6D,UAAA,QAAAnF,EACjG,OAAQ4F,EAAOpI,MACX,IAAK,kBACD,OAAO4B,EAAMtE,OAAO,SAAA+K,GAAE,OAAIA,EAAGpM,KAAOmM,EAAOnM,KAE/C,IAAK,eACD,OAAQ,CACJA,GAAImM,EAAOlM,WACXvB,MAAOyN,EAAOzN,MACd2C,OAAQ,MACRgL,UAAW,GACXC,MAAO,IACVC,OAAAC,YAAK7G,IAEV,IAAK,wBACD,IAAM8G,EAAgB9G,EAAM+G,KAAK,SAAAN,GAAE,OAAIA,EAAGpM,KAAOmM,EAAOnM,KAIxD,OAHIyM,IACAA,EAAc/N,MAAQyN,EAAOzN,OAEjC8N,YAAW7G,GAEf,IAAK,yBACD,IAAIuG,EAAWvG,EAAM+G,KAAK,SAAAN,GAAE,OAAIA,EAAGpM,KAAOmM,EAAOnM,KAIjD,OAHIkM,IACAA,EAAS7K,OAAS8K,EAAO9K,QAE7BmL,YAAW7G,GAEf,IAAK,gBACD,OAAOwG,EAAOtB,UAAUrJ,IAAI,SAAA4K,GACxB,OAAAjN,YAAA,GACOiN,EAAE,CACL/K,OAAQ,UAIpB,QACI,OAAOsE,IEvEfvE,MD0CwB,WAAgF,IAA/EuE,EAAqB+F,UAAA7D,OAAA,QAAAtB,IAAAmF,UAAA,GAAAA,UAAA,GAAGtB,EAAc+B,EAAoBT,UAAA7D,OAAA,EAAA6D,UAAA,QAAAnF,EACnF,OAAQ4F,EAAOpI,MACX,IAAK,cACD,IAAM4I,EAASxN,YAAA,GAAOwG,GAEhBiH,EADQjH,EAAMwG,EAAO7B,YACCjJ,OAAO,SAAAC,GAAC,OAAIA,EAAEtB,KAAOmM,EAAOP,SAGxD,OAFAe,EAAWR,EAAO7B,YAAcsC,EAEzBD,EAEX,IAAK,WACD,IAAMA,EAASxN,YAAA,GAAOwG,GAChBvE,EAAQuL,EAAUR,EAAO7B,YAczBuC,EAAQ,CAbE,CACZ7M,GAAIyK,cACJ/L,MAAOyN,EAAOzN,MACd0B,OAAQ9D,EAAamE,IACrBqM,WAAYX,EAAO7B,WACnByC,YAAa,GACbV,UAAW,GACXW,UAAW,GACXC,SAAU,GACVX,MAAO,EACPY,SAAU3Q,EAAe4Q,MAGJZ,OAAAC,YAAKpL,IAE9B,OADAuL,EAAUR,EAAO7B,YAAcuC,EACxBF,EAEX,IAAK,qBACD,IAAMA,EAASxN,YAAA,GAAOwG,GAClBvE,EAAQuE,EAAMwG,EAAO7B,YAKzB,OAJA3E,EAAMwG,EAAO7B,YAAclJ,EAAMI,IAAI,SAAAF,GAAC,OAAIA,EAAEtB,KAAOmM,EAAOP,OAAMzM,YAAA,GACtDmC,EAAC,CAAElB,OAAQ+L,EAAO/L,SACtBkB,IAECqL,EAEX,IAAK,oBACD,IAAMA,EAASxN,YAAA,GAAOwG,GAClBvE,EAAQuE,EAAMwG,EAAO7B,YAIzB,OAHA3E,EAAMwG,EAAO7B,YAAclJ,EAAMI,IAAI,SAAAF,GAAC,OAAIA,EAAEtB,KAAOmM,EAAOP,OAAMzM,YAAA,GACtDmC,EAAC,CAAE5C,MAAOyN,EAAOzN,QACrB4C,IACCqL,EAEX,IAAK,eACD,IAAMA,EAASxN,YAAA,GAAOwG,GAGtB,OADAgH,EAAUR,EAAOlM,YAAc,GACxB0M,EAEX,IAAK,kBACD,IAAMA,EAASxN,YAAA,GAAOwG,GAEtB,cADOgH,EAAUR,EAAOnM,IACjB2M,EAEX,IAAK,gBACD,IAAMA,EAASxN,YAAA,GAAOwG,GAMtB,OAJAwG,EAAOtB,UAAUjG,QAAQ,SAAAwH,GACrBO,EAAUP,EAAGpM,IAAM,KAGhB2M,EAEX,IAAK,YACD,IAAMA,EAASxN,YAAA,GAAOwG,GAEtB,OADAgH,EAAUR,EAAOlM,YAAckM,EAAO/K,MAC/BuL,EAEX,QACI,OAAOhH,MC9GNyH,EAAQC,YAAYrB,EAC7BsB,YAAgBC,MAKPC,EAA+BC,IAG5CC,OAAON,MAAQA,EC6GAO,MA1Gf,WAGI,IAAMzC,EAAWsC,IACXI,EAAWC,YAAsD,SAAAlI,GAAK,OAAIA,EAAMuG,WAChF9K,EAAQyM,YAA2C,SAAAlI,GAAK,OAAIA,EAAMvE,QAGxE0M,oBAAU,WACN5C,EAASJ,MACV,IAEH,IAAMpK,EAAad,sBAAY,SAAUI,EAAYsK,GACjDY,EAASS,EAAa3L,EAAIsK,KAC3B,CAACY,IAEEjK,EAAUrB,sBAAY,SAAUlB,EAAe4L,GACjDY,EAASW,EAAUnN,EAAO4L,KAC3B,CAACY,IAEE6C,EAAenO,sBAAY,SAAUoO,EAAgB5N,EAAsBkK,GAC7EY,EAASY,EAAmBkC,EAAQ5N,EAAQkK,KAC7C,CAACY,IAEEpL,EAAkBF,sBAAY,SAAUoO,EAAgB7M,EAAkBmJ,GAC5EY,EAASa,EAAkBiC,EAAQ7M,EAAUmJ,KAC9C,CAACY,IAEEpK,EAAelB,sBAAY,SAAUlC,EAAyBuQ,GAChE,IAAM9B,EAASxB,EAAuBsD,EAAYvQ,GAClDwN,EAASiB,IACV,CAACjB,IAEE3J,EAAiB3B,sBAAY,SAAU0K,GACzC,IAAM6B,EAAS9B,EAAiBC,GAChCY,EAASiB,IACV,CAACjB,IAEEhK,EAAsBtB,sBAAY,SAAUqO,EAAoB9M,GAClE+J,EAASR,EAAsBuD,EAAY9M,KAC5C,CAAC+J,IAGEgD,EAAetO,sBAAY,SAAClB,GAC9B,IAAMyN,EAAS5B,EAAc7L,GAC7BwM,EAASiB,IACV,CAACjB,IAEJ,OACIzO,IAAAa,cAAA,OAAK6C,UAAU,OAEX1D,IAAAa,cAAC6Q,IAAM,CAACC,SAAS,UAEb3R,IAAAa,cAAC+Q,IAAO,KACJ5R,IAAAa,cAACY,IAAU,CACPoQ,KAAK,QACLC,KAAK,QACLlQ,MAAM,UACNmQ,aAAW,OACXC,GAAI,CAACC,GAAI,IAETjS,IAAAa,cAACqR,IAAI,OAETlS,IAAAa,cAACsR,IAAU,CAACpR,QAAQ,KAAKqR,UAAU,MAAMJ,GAAI,CAACK,SAAU,IAAI,QAG5DrS,IAAAa,cAACmE,IAAM,CAACpD,MAAM,WAAU,WAIhC5B,IAAAa,cAACyR,IAAS,CAACC,OAAK,GACZvS,IAAAa,cAAC2R,IAAI,CAACC,WAAS,EAACC,MAAO,CAACC,QAAS,kBAC7B3S,IAAAa,cAACd,EAAW,CAACwB,QAASkQ,KAE1BzR,IAAAa,cAAC2R,IAAI,CAACC,WAAS,EAACG,QAAS,GAEjBzB,EAASpM,IAAI,SAAC4K,GACV,IACIkD,EADmBlO,EAAMgL,EAAGpM,IAGhC,OAAOvD,IAAAa,cAAC2R,IAAI,CAACM,MAAI,GACb9S,IAAAa,cAACkS,IAAK,CAACL,MAAO,CAACC,QAAS,SACpB3S,IAAAa,cAACsD,EAAQ,CACLV,IAAKkM,EAAGpM,GACRA,GAAIoM,EAAGpM,GACPtB,MAAO0N,EAAG1N,MACV0C,MAAOkO,EACP5O,WAAYA,EACZI,aAAcA,EACdG,QAASA,EACTT,iBAAkBuN,EAClB1M,OAAQ+K,EAAG/K,OACXE,eAAgBA,EAChBzB,gBAAiBA,EACjBoB,oBAAqBA,YC/GhDuO,IAASC,WAClBC,SAASC,eAAe,SAEvBC,OACDpT,IAAAa,cAACwS,IAAQ,CAAC1C,MAAOA,GACb3Q,IAAAa,cAACqQ,EAAY","file":"static/js/main.4bd83054.chunk.js","sourcesContent":["import axios, {AxiosRequestConfig} from \"axios\";\r\nimport {CreateTodolist, DeleteTodolist, UpdateTodolistTitle} from \"../stories/todolists-api.stories\";\r\n\r\nconst settings: AxiosRequestConfig = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': \"93c5f09c-aff4-416b-940b-88765d768a00\"\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n// type _CreateTodolistResponseType = {\r\n//     resultCode: number\r\n//     title: string[]\r\n//     data: {\r\n//         item: TodolistsType\r\n//     }\r\n// }\r\n// type _DeleteUpdateTodolistResponseType = {\r\n//     resultCode: number\r\n//     title: string[]\r\n//     data: {}\r\n// }\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    title: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriotities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    // completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriotities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolists(title: string) {\r\n        return instance.post <ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodolists(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolists(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string){\r\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ControlPoint} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(event.currentTarget.value)\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle('')\r\n        } else {\r\n            setError('Field is required')\r\n        }\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (event.charCode === 13) {\r\n            props.addItem(newTaskTitle)\r\n            setNewTaskTitle('')\r\n        }\r\n\r\n    }\r\n    return <div>\r\n\r\n        <TextField\r\n            variant={'standard'}\r\n            label={'Type value'}\r\n            value={newTaskTitle}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            helperText={error}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n\r\n    </div>\r\n\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableStanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableStan = React.memo(function (props: EditableStanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableStan} from \"./EditableStan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistID: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        // console.log(e.currentTarget.checked + \" \" + t.id)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onChangeStatusHandler}\r\n            />\r\n            <EditableStan title={props.task.title}\r\n                          onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableStan} from \"./EditableStan\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport {FilterValuesType} from \"./state/todolist-reducer\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     status: TaskStatuses\r\n// }\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (todoListID: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onComplitedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New );\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableStan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.id}\r\n                        key={props.id}\r\n                    />)\r\n                }\r\n\r\n\r\n                {/*<li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[0].title}</span></li>*/\r\n                }\r\n                {/*<li><input type=\"checkbox\" checked={props.tasks[1].isDone}/> <span>{props.tasks[1].title}</span></li>*/\r\n                }\r\n                {/*<li><input type=\"checkbox\" checked={props.tasks[2].isDone}/> <span>{props.tasks[2].title}</span></li>*/\r\n                }\r\n\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onComplitedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {v1} from \"uuid\";\r\nimport {todolistsApi, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionsTypes =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsTypes): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const cnageTodoList = state.find(tl => tl.id === action.id)\r\n            if (cnageTodoList) {\r\n                cnageTodoList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistID}\r\n}\r\nexport const addTodolistAC = (newTodolistTitle: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: newTodolistTitle, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists: todolists}\r\n}\r\n\r\n\r\n\r\nexport const fetchTodolistsTC = (): any => {\r\n    return async (dispatch: Dispatch) => {\r\n        todolistsApi.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const fetchTodoTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsApi.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n    TodolistDomainType\r\n} from \"./todolist-reducer\";\r\nimport {TaskPriotities, TaskStatuses, TaskType, TodolistType} from \"../api/todolists-api\";\r\n\r\ntype ActionsTypes = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTastsActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistID: string\r\n}\r\nexport type SetTastsActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsTypes): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistID]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy [action.todolistID] = filteredTasks\r\n\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistID]\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistID,\r\n                description: '',\r\n                addedDate: '',\r\n                startDate: '',\r\n                deadline: '',\r\n                order: 2,\r\n                priority: TaskPriotities.Low\r\n\r\n            }\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistID] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todolistID]\r\n            state[action.todolistID] = tasks.map(t => t.id === action.taskId\r\n                ? {...t, status: action.status}\r\n                : t)\r\n\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todolistID]\r\n            state[action.todolistID] = tasks.map(t => t.id === action.taskId\r\n                ? {...t, title: action.title}\r\n                : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistID, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistID}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   status: TaskStatuses,\r\n                                   todolistID: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistID, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string,\r\n                                  title: string,\r\n                                  todolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistID, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todoListId}\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: todolistReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\ntype DispatchFunc = () => AppDispatch\r\nexport const useAppDispatch: DispatchFunc = useDispatch\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, useAppDispatch} from \"./state/store\";\r\nimport {TaskStatuses, TaskType, todolistsApi} from \"./api/todolists-api\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n\r\n    const dispatch = useAppDispatch()\r\n    const todoList = useSelector<AppRootState, Array<TodolistDomainType>>((state => state.todolist))\r\n    const tasks = useSelector<AppRootState, TasksStateType>((state => state.tasks))\r\n\r\n    // console.log( todolistsApi.getTodolists())\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistID: string) {\r\n        dispatch(removeTaskAC(id, todolistID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistID: string) {\r\n        dispatch(addTaskAC(title, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (taskID: string, status: TaskStatuses, todolistID: string) {\r\n        dispatch(changeTaskStatusAC(taskID, status, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (taskID: string, newTitle: string, todolistID: string) {\r\n        dispatch(changeTaskTitleAC(taskID, newTitle, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todoListID: string) {\r\n        const action = changeTodolistFilterAC(todoListID, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (todolistID: string) {\r\n        const action = removeTodolistAC(todolistID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (todoListID: string, newTitle: string) {\r\n        dispatch(changeTodolistTitleAC(todoListID, newTitle))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTodolists = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px 5px 20px'}}>\r\n                    <AddItemForm addItem={addTodolists}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        todoList.map((tl) => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '15px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}